import pandas as pd

# Create a sample DataFrame
sales_figures = pd.DataFrame({'Date': ['2023-03-01', '2023-03-03', '2023-03-05', '2023-03-07'],
                              'Product A MTD': [100, 300, 450, 600],
                              'Product B MTD': [50, 150, 250, 350],
                              'Product C MTD': [500, 1100, 1800, 2600],
                              'Product D MTD': [200, 500, 900, 1400]})

# Convert the 'Date' column to a datetime type
sales_figures['Date'] = pd.to_datetime(sales_figures['Date'])

# Set the 'Date' column as the index
sales_figures = sales_figures.set_index('Date')

# Create a date range that covers the entire month
start_date = '2023-03-01'
end_date = '2023-03-31'
date_range = pd.date_range(start=start_date, end=end_date)

# Reindex the DataFrame with the date range
sales_figures = sales_figures.reindex(date_range)

# Forward fill the missing MTD sales figures
sales_figures = sales_figures.fillna(method='ffill')


-------------------------------------------------------------------------------------

import pandas as pd

# create a sample dataframe with object type columns
df = pd.DataFrame({'column_1': ['1', '2', '3'], 'column_2': ['4.5', '5.6', '6.7'], 'column_3': ['a', 'b', 'c']})

# check if column_1 values are numerical
column_1_is_numeric = pd.to_numeric(df['column_1'], errors='coerce').notnull().all()

# check if column_2 values are numerical
column_2_is_numeric = pd.to_numeric(df['column_2'], errors='coerce').notnull().all()

# check if column_3 values are numerical
column_3_is_numeric = pd.to_numeric(df['column_3'], errors='coerce').notnull().all()

# print the results
print(column_1_is_numeric)  # True
print(column_2_is_numeric)  # True
print(column_3_is_numeric)  # False

-----------------------------------------------------------------------------------------

import pandas as pd
from datetime import datetime, timedelta

# Sample data
df = pd.DataFrame({
    'date': ['2022-01-03', '2022-01-03', '2022-01-05', '2022-01-05', '2022-01-07', '2022-01-07', '2022-01-09', '2022-01-09', '2022-01-11', '2022-01-11'],
    'product': ['A', 'B', 'A', 'C', 'A', 'B', 'A', 'D', 'E', 'B'],
    'sales': [20.0, 30.0, 25.0, None, 40.0, 50.0, 60.0, None, None, 70.0]
})

# Convert 'date' column to datetime
df['date'] = pd.to_datetime(df['date'])

# Get all unique products
products = df['product'].unique()

# Create a list of DataFrames for each product
dfs = []
for product in products:
    # Filter the DataFrame by product
    df_product = df[df['product'] == product]

    # Create a new DataFrame with a complete range of dates
    start_date = datetime(df_product.index.min().year, df_product.index.min().month, 1)
    end_date = datetime(2022, 1, 31)
    index = pd.date_range(start_date, end_date, freq='D')
    new_df = pd.DataFrame({'date': index})

    # Add 'product' column
    new_df['product'] = product

    # Merge the original DataFrame with the new DataFrame
    merged_df = pd.merge(new_df, df_product, how='left', on=['date', 'product'])

    # Fill missing sales values with the previous available sales values
    merged_df = merged_df.fillna(method='ffill')

    # Fill missing sales values with 0
    merged_df['sales'] = merged_df['sales'].fillna(0)

    # Append to the list of DataFrames
    dfs.append(merged_df)

# Concatenate all DataFrames together
result_df = pd.concat(dfs)

# Set 'date' column as the index
result_df = result_df.set_index('date')

# Sort the DataFrame by 'product' and 'date'
result_df = result_df.sort_values(['product', 'date'])
